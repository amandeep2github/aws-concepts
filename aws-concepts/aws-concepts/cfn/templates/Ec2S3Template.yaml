---
AWSTemplateFormatVersion: '2010-09-09'
Description: All things needed to get aws solution architect associate certification
#Metadata: #Required: no

#Mappings: #Required: no

Parameters: #Required: no
  KeyPairName:
      Type: AWS::EC2::KeyPair::KeyName
      Description: Key for all tulip resources access
      Default: TulipKeyPair
      #AllowedValues:
      # - TulipKeyPair
      ConstraintDescription: Can't be other than tulip prefixed
  L0EC2InstanceTypeParam:
    Type: String
    Description: Type of instance e.g. micro, small etc
    Default: t2.micro
    AllowedValues:
    - t2.nano
    - t2.micro
    ConstraintDescription: Can't be other than free instance type i.e. t2.micro

  L1SSHLocationParam:
    Type: String
    Description: The IP address range that can be used to SSH to the EC2 instances
    Default: 122.161.250.184/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"#double quotes required otherwise validation fails
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  Ec2AZ:
    Type: String
    Default: us-east-1a


#Conditions: #Required: no

Resources:
  L0VPC: #can only be alphnumeric
    Type: "AWS::EC2::VPC" #double quotes optional
    Properties:
      Tags:
      - Key: Name
        Value: L0VPC
        #three implcity tags which aws makes when resources created as part of stack
        #aws:cloudformation:logical-id
        #aws:cloudformation:stack-id
        #aws:cloudformation:stack-name
      CidrBlock: 192.168.0.0/16
      #EnableDnsSupport: true
      #EnableDnsHostnames: true
      #InstanceTenancy: default

  L1VPC: #can only be alphnumeric
    Type: "AWS::EC2::VPC" #double quotes optional
    Properties:
      Tags:
      - Key: Name
        Value: L1VPC
        #three implcity tags which aws makes when resources created as part of stack
        #aws:cloudformation:logical-id
        #aws:cloudformation:stack-id
        #aws:cloudformation:stack-name
      CidrBlock: 192.168.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      #InstanceTenancy: default


  L0Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
      - Key: Name
        Value: L0Subnet
      #AvailabilityZone: <some value like us-west-2a>
      CidrBlock: 192.168.1.0/24
      #MapPublicIpOnLaunch: false
      VpcId:
        Ref: L1VPC


  L1SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      #GroupName: #Required: no, Default value: <logic name of stack>-<logic name of Security Group>-<some id>
      GroupDescription: Security Group created for B08 Tower
      VpcId:
        Ref: L1VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp:
          Ref: L1SSHLocationParam
      SecurityGroupEgress: #by default its all types, all protocol, all ports, 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: B08 Security Group
  L0AdminGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName:
        !Join ['', [!Ref 'AWS::Region', 'AdminGroup']]
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/IAMFullAccess']
      #Path:
      #Policies:


  L0EC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref L0EC2InstanceTypeParam
      SecurityGroupIds: [!Ref L1SecurityGroup]
      AvailabilityZone: !Ref Ec2AZ
      KeyName: !Ref KeyPairName
      ImageId: ami-0080e4c5bc078760e
      SubnetId: !Ref L0Subnet
      Tags:
      - Key: Name
        Value: L0EC2
  L0EC21:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref L0EC2InstanceTypeParam
      AvailabilityZone: {"Ref":"Ec2AZ"}
      KeyName: !Ref KeyPairName
      ImageId: ami-0080e4c5bc078760e
      Tags:
      - Key: Name
        Value: L0EC21
Outputs:
  PublicDNSL0EC2:
    Description: Public DNS Name of the EC2
    Value: !GetAtt L0EC2.PrivateDnsName